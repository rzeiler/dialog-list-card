(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._hass=null,this._config=null}set hass(t){this._hass=t,this._update()}set config(t){this._config=t,this._update()}connectedCallback(){this.render()}render(){this.shadowRoot.innerHTML="\n      <style>\n        @media (min-width: 600px) and (min-height: 501px) {\n            ha-dialog {\n                --mdc-dialog-min-width: 580px;\n                --mdc-dialog-max-width: 580px;\n                --mdc-dialog-max-height: calc(100% - 72px);\n            }\n        }\n        ha-dialog {\n            --vertical-align-dialog: flex-start;\n            --dialog-surface-margin-top: 40px;\n            --dialog-content-padding: 0;\n        }\n      </style>\n      <ha-dialog>\n        <ha-list>\n          \n        </ha-list>\n      <ha-dialog>\n    ",this.dialog=this.shadowRoot.querySelector("ha-dialog"),this.dialog.open=!1,this.dialog.hideActions=!0,this.dialog.scrimClickAction=!0,this.dialog.escapeKeyAction}_update(){if(!this.shadowRoot)return;const t=this.dialog.querySelector("ha-list");this._config&&(this.dialog.heading=this._config.title),this._hass&&this._config?.entities&&(t.innerHTML="",this._config.entities.map(e=>{this._hass.states[e];const i=this.getListItem(e),n=()=>this.serviceCall(i.domain,e);i.addEventListener("click",n),i.addEventListener("touchend",n),t.appendChild(i)}))}serviceCall(t,e){var i="toggle";("script"===t||"scene"===t)&&(i="turn_on"),this._hass.callService(t,i,{entity_id:e.entity}).then(t=>{console.log("then",t),this.dialog.remove()})}open(){this._update(),this.dialog.open=!this.dialog.open}getListItem(t){const e="string"==typeof t?t:t.entity,i=this._hass.states[e];if(!i)return;const n=document.createElement("ha-md-list-item");n.classList.add("two-line"),n.type="button",n.interactive=!0,n.multiline=!0;const s=document.createElement("span");s.innerText=t.title||i.attributes.friendly_name||e,s.slot="headline",n.appendChild(s);const a=document.createElement("ha-relative-time");a.hass=this._hass,a.slot="supporting-text",a.datetime=i?.attributes.last_triggered,n.appendChild(a);const o=e.split(".")[0];n.domain=o;const d=document.createElement("span");d.innerText=o,d.slot="trailing-supporting-text",n.appendChild(d);const h=document.createElement("ha-state-icon");return h.slot="start",h.hass=this._hass,h.stateObj=i,h.style.setProperty("--mdc-icon-size","22px"),h.style.color="on"===i.state?"orange":"gray",n.appendChild(h),n}}customElements.define("dialog-list",t);class e extends HTMLElement{setConfig(t){this.config=t||{title:"",entities:[]},this.render()}connectedCallback(){this.shadowRoot||this.attachShadow({mode:"open"}),this.render()}render(){if(!this.shadowRoot)return;console.log("card render"),this.shadowRoot.innerHTML=`\n      <style>\n        ha-card{\n          display: flex; align-items: center; height: 100%; padding: 5px 10px; cursor: pointer;\n        }\n      </style>\n      <ha-card>\n        <div style="position: relative; display: flex; align-items: center; justify-content: center; min-width: 36px; height: 36px; border-radius: 50px; overflow: hidden; transition: box-shadow 180ms ease-in-out; background-color: rgba(158,158,158,.1);">\n          <ha-icon icon="${this.config.icon}" style="--mdc-icon-size: 24px;" />\n        </div>\n        <ha-info style="padding: 5px 10px;">\n          <div>${this.config.title}</div>\n           <ha-relative-time  style="font-size: 90%;" ></ha-relative-time> \n        </ha-info>\n      </ha-card> \n      <dialog-list></dialog-list>\n    `;const t=this._getLatestFromList(this.config.entities),e=this.shadowRoot.querySelector("ha-relative-time");e.hass=this._hass,e.datetime=t,this.dialog=this.shadowRoot.querySelector("dialog-list"),this.dialog.config=this.config,this._hass&&(this.dialog.hass=this._hass),this.shadowRoot.querySelector("ha-card").addEventListener("click",()=>{this.dialog.open()}),this.shadowRoot.querySelectorAll("button").forEach(t=>{t.addEventListener("click",()=>this._callService(t.dataset.entity))})}_callService(t){if(!this.hass)return;const e=t.split(".")[0];this.hass.callService(e,"toggle",{entity_id:t})}set hass(t){this._hass=t,this._dialog&&(this._dialog.hass=t)}get hass(){return this._hass}_getLatestFromList(t){return t.map(t=>{const e=this._hass.states[t.entity],i=e?.attributes?.last_triggered||e?.last_changed;return i?new Date(i):null}).filter(t=>null!==t).sort((t,e)=>e-t)[0]||null}getCardSize(){return 1}getGridOptions(){return{rows:1,columns:6}}static getConfigElement(){return document.createElement("dialog-list-editor")}}customElements.define("dialog-list-card",e),window.customCards=window.customCards||[],window.customCards.push({type:"dialog-list-card",name:"Dialog List Card",description:"Ein Dialog mit Aktionen"});class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._config={title:"",icon:"mdi:menu",dialog_title:"",state_on_entity:"",host:"",entities:[]}}set hass(t){this._hass=t}setConfig(t){this._config={title:"",icon:"mdi:menu",dialog_title:"",state_on_entity:"",host:"",entities:[],...t},this.render()}connectedCallback(){this.shadowRoot||this.attachShadow({mode:"open"}),this.render()}render(){if(!this.shadowRoot)return;if(!this._hass)return;if(!this._config)return;console.log("render"),this.shadowRoot.innerHTML=`\n      <style>\n        ha-form-grid {\n          display: grid !important;\n          grid-template-columns: repeat(var(--form-grid-column-count, auto-fit), minmax(var(--form-grid-min-width, 200px), 1fr));\n          grid-column-gap:10px;\n          grid-row-gap: 24px;\n        }\n        ha-button {\n          padding-top: 10px;\n        }  \n        --mdc-dialog-content-ink-color: red; \n      </style>\n      <ha-form-expandable>\n        \x3c!-- Titel --\x3e\n        <ha-expansion-panel expanded outlined icon="menu" header="Titles">\n          <ha-form-grid>\n            <ha-textfield\n              label="Title"\n              value="${this._config.title||""}"\n              id="title"\n            ></ha-textfield>\n            <ha-textfield\n              label="Dialog Title"\n              value="${this._config.dialog_title||""}"\n              id="dialog_title"\n            ></ha-textfield>\n            <ha-icon-picker\n              label="Symbol"\n              hass=${this._hass}\n              value="${this._config.icon||""}"\n              id="icon"\n            ></ha-icon-picker>\n          </ha-form-grid>\n          <ha-form\n            id="state_on_entity"\n          ></ha-form>\n        </ha-expansion-panel>\n        <ha-expansion-panel expanded outlined icon="menu" header="Entitäten (erforderlich)">\n            ${(this._config.entities||[]).map((t,e)=>`<ha-form style="--mdc-dialog-content-ink-color:transparent;" class='pb-1' id="entity${e}"></ha-form>`).join("")}\n            <ha-button id="addEntity">+ Entity hinzufügen</ha-button>\n        </ha-expansion-panel>\n      </ha-form-expandable>\n    `;const t=this.shadowRoot.querySelectorAll("ha-form"),e=Array.from(t).find(t=>"state_on_entity"===t.id);e.schema=[{name:"entity",selector:{entity:{}}}],e.hass=this._hass,e.data={entity:this._config.state_on_entity},(this._config.entities||[]).map((e,i)=>{const n=Array.from(t).find(t=>t.id===`entity${i}`);n.schema=[{name:"entity",selector:{entity:{}}}],n.hass=this._hass,n.data={entity:e.entity}}),(async()=>{const e=["ha-selector","ha-selector-entity","ha-entity-picker","ha-generic-picker","label"];for(const i of t){let t=i;for(const i of e)if(t=await this.waitForElement(t,i,100),console.log(t),"label"==i&&t.parentNode&&t.parentNode.removeChild(t),!t)break}})(),this.shadowRoot.getElementById("title")?.addEventListener("input",t=>this._updateConfig("title",t.target.value)),this.shadowRoot.getElementById("dialog_title")?.addEventListener("input",t=>this._updateConfig("dialog_title",t.target.value)),this.shadowRoot.getElementById("icon")?.addEventListener("value-changed",t=>this._updateConfig("icon",t.detail.value)),this.shadowRoot.getElementById("state_on_entity")?.addEventListener("value-changed",t=>this._updateConfig("state_on_entity",t.detail.value.entity)),this._config.entities.forEach((t,e)=>{const i=this.shadowRoot.getElementById(`entity_${e}`);i?.addEventListener("value-changed",t=>this._updateEntity(e,t.detail.value.entity))}),this.shadowRoot.getElementById("addEntity")?.addEventListener("click",()=>this._addEntity())}waitForElement(t,e,i=50){return new Promise(n=>{const s=Date.now(),a=()=>{const o=t?.shadowRoot?.querySelector(e);o||Date.now()-s>i?n(o||null):requestAnimationFrame(a)};a()})}_updateConfig(t,e){this._config={...this._config,[t]:e},this.fireChange()}_updateEntity(t,e){const i=[...this._config.entities];i[t]=e,this._config={...this._config,entities:i},this.fireChange()}_addEntity(){this._config={...this._config,entities:[...this._config.entities,""]},this.render()}fireChange(){const t=new CustomEvent("config-changed",{detail:{config:this._config},bubbles:!0,composed:!0});this.dispatchEvent(t)}}customElements.define("dialog-list-editor",i)})();